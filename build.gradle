plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2024.3.2"
    id "co.uzzu.dotenv.gradle" version "4.0.0" // Plugin for .env file support
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

ext {
    alreadyAdded = []
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define deploy target and artifacts
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {}

                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }

                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('config')
                    directory = '/home/lvuser/config'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

wpi.java.debugJni = false

def includeDesktopSupport = false

// Define project dependencies
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    addGithubRepoJitPack("lolhol", "KeybindConfigurator", "0.2")

    implementation 'com.moandjiezana.toml:toml4j:0.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation settings
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Create a fat jar (including all dependencies) and set the manifest for WPILib
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Set the jar task for deployment
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure the string concatenation setting for inline compilation
tasks.withType(JavaCompile) {
    options.compilerArgs.addAll(['-XDstringConcat=inline', '-Xlint:unchecked'])
}

// ---------------- Helper functions ----------------

String toJitpack(String user, String repo) {
    return toJitpack(user, repo, "main-SNAPSHOT")
}

String toJitpack(String user, String repo, String version) {
    return "com.github.${user}:${repo}:${version}"
}

String toGithub(String user, String repo) {
    return "https://github.com/${user}/${repo}.git"
}

def addGithubRepoJitPack(String user, String repo, String version) {
    addGithubRepo(user, repo, "com.github.${user}:${repo}:${version}")
}

def addGithubRepo(String user, String repo, String nonProductionImplementationString) {
    addGithubRepo(user, repo, nonProductionImplementationString, env.allVariables().get("PROD_FLAG") == "true")
}

def addGithubRepo(String user, String repo, String nonProductionImplementationString, boolean isProduction) {
    if (isProduction) {
        println("")
        println("Building ${user}/${repo}")
        println("")
        def output = new ByteArrayOutputStream()
        exec {
            commandLine "python3", "scripts/clone_and_build_repos.py", toGithub(user, repo)
            standardOutput = output
        }

        def brightYellow = '\u001B[93m'

        def reset = '\u001B[0m'

        println("${brightYellow}${output.toString()}${reset}")
        println("")
        println("")
        println("")

        def jarFiles = fileTree(dir: "lib/build", include: "**/*.jar")
        println("Adding to dependencies:")

        jarFiles.each { jarFile ->
            println(jarFile.path)
        }

        dependencies {
            implementation files(jarFiles)
        }

        alreadyAdded.addAll(jarFiles)
    } else {
        dependencies {
            implementation nonProductionImplementationString
        }
    }
}